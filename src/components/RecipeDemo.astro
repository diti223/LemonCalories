---
// Component: Modular RecipeDemo.astro
// Purpose: Orchestrates the interactive recipe demo using smaller focused components
import TypewriterInput from './recipe-demo/TypewriterInput.astro';
import AIProcessing from './recipe-demo/AIProcessing.astro';
import IngredientsList from './recipe-demo/IngredientsList.astro';
import NutritionSummary from './recipe-demo/NutritionSummary.astro';
import InstructionsPreview from './recipe-demo/InstructionsPreview.astro';
import ScalingCalculator from './recipe-demo/ScalingCalculator.astro';

import type { RecipeData } from '../types/recipe';

export interface Props {
  recipeData?: RecipeData;
}

const { recipeData } = Astro.props;

// Demo recipe text
const demoRecipeText = `Grilled Chicken Salad for Two

Take 2 large chicken breasts and grill them with a pinch of salt and pepper. 
Mix with 4 cups of mixed greens, half a cucumber diced, 1 medium tomato chopped, 
and quarter of a red onion sliced thin. Drizzle with 2 tablespoons of olive oil 
and a squeeze of lemon juice. Serves 2 people.`;

const displayRecipeText = recipeData?.originalText || demoRecipeText;
---

<section class="py-20 bg-gradient-to-br from-gray-50 to-lemon-50 dark:from-gray-900 dark:to-gray-800">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
        Watch Recipe Magic Happen
      </h2>
      <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
        From natural language to professional nutrition analysis. 
        See weight-based calculations, smart scaling, and intelligent rounding in action.
      </p>
    </div>
    
    <div class="max-w-5xl mx-auto">
      <!-- Recipe Input with Typewriter Effect and AI Processing -->
      <div class="relative">
        <TypewriterInput recipeText={displayRecipeText} />
        <div class="absolute inset-0 pointer-events-none">
          <div class="p-8">
            <div class="bg-gray-50 dark:bg-gray-800 rounded-xl p-6 font-mono text-sm leading-relaxed min-h-[200px] relative">
              <AIProcessing isVisible={false} />
            </div>
          </div>
        </div>
      </div>
      
      <!-- Results Section with Tabs -->
      <div id="results-section" class="bg-white dark:bg-gray-900 rounded-3xl shadow-2xl overflow-hidden opacity-0 transform translate-y-8 transition-all duration-1000">
        <!-- Tab Navigation -->
        <div class="border-b border-gray-200 dark:border-gray-700">
          <div class="flex flex-wrap">
            <button class="tab-btn active flex-1 px-6 py-4 text-center font-medium border-b-2 border-lemon-500 text-lemon-600 dark:text-lemon-400 transition-colors" data-tab="ingredients">
              üìã Ingredients
            </button>
            <button class="tab-btn flex-1 px-6 py-4 text-center font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 transition-colors" data-tab="instructions">
              üìñ Instructions
            </button>
            <button class="tab-btn flex-1 px-6 py-4 text-center font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 transition-colors" data-tab="nutrition">
              üìä Nutrition
            </button>
            <button class="tab-btn flex-1 px-6 py-4 text-center font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 transition-colors" data-tab="scaling">
              ‚öñÔ∏è Scale
            </button>
            
            <!-- Unit Toggle -->
            <div class="px-6 py-4 flex items-center gap-2">
              <label class="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" id="imperial-toggle" class="sr-only peer">
                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-lemon-300 dark:peer-focus:ring-lemon-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-lemon-600"></div>
                <span class="ml-3 text-sm font-medium text-gray-700 dark:text-gray-300">Imperial</span>
              </label>
            </div>
          </div>
        </div>
        
        <!-- Tab Content -->
        <div class="p-8">
          <!-- Ingredients Tab -->
          <div id="ingredients-tab" class="tab-content">
            <IngredientsList ingredients={recipeData?.ingredients || []} />
          </div>
          
          <!-- Instructions Tab -->
          <div id="instructions-tab" class="tab-content hidden">
            <InstructionsPreview 
              instructions={recipeData?.instructions || []} 
              showPremiumTeaser={true} 
            />
          </div>
          
          <!-- Nutrition Tab -->
          <div id="nutrition-tab" class="tab-content hidden">
            <NutritionSummary 
              totalMacros={recipeData?.nutritionTotals} 
              servings={recipeData?.servings || 2} 
            />
          </div>
          
          <!-- Scaling Tab -->
          <div id="scaling-tab" class="tab-content hidden">
            <ScalingCalculator 
              baseServings={recipeData?.servings || 2}
              currentServings={recipeData?.servings || 2}
            />
          </div>
        </div>
      </div>
      
      <!-- Call to Action -->
      <div class="text-center mt-12">
        <div class="inline-flex items-center gap-2 text-green-600 dark:text-green-400 font-medium mb-4">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          <span>Professional-grade analysis complete!</span>
        </div>
        <div>
          <button class="bg-gradient-to-r from-lemon-500 to-orange-500 hover:from-lemon-600 hover:to-orange-600 text-white font-semibold px-8 py-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105">
            Try Your Own Recipe
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Main orchestration script - handles tab switching and shows results
  document.addEventListener('DOMContentLoaded', () => {
    // Tab functionality
    document.querySelectorAll('.tab-btn').forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = (button as HTMLElement).dataset.tab;
        
        if (targetTab) {
          // Update active tab button
          document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active', 'border-lemon-500', 'text-lemon-600', 'dark:text-lemon-400');
            btn.classList.add('border-transparent', 'text-gray-500', 'dark:text-gray-400');
          });
          button.classList.add('active', 'border-lemon-500', 'text-lemon-600', 'dark:text-lemon-400');
          button.classList.remove('border-transparent', 'text-gray-500', 'dark:text-gray-400');
          
          // Show target tab content
          document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.add('hidden');
          });
          
          const targetTabEl = document.getElementById(`${targetTab}-tab`);
          if (targetTabEl) {
            targetTabEl.classList.remove('hidden');
          }
        }
      });
    });
    
    // Imperial toggle
    const imperialToggle = document.getElementById('imperial-toggle');
    if (imperialToggle) {
      imperialToggle.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (target) {
          console.log('Imperial mode:', target.checked);
          // This would trigger unit conversion across all components
          window.dispatchEvent(new CustomEvent('unit-toggle', { 
            detail: { imperial: target.checked }
          }));
        }
      });
    }
    
    // Show results when AI processing completes
    window.addEventListener('ai-processing-complete', () => {
      const resultsSection = document.getElementById('results-section');
      if (resultsSection) {
        resultsSection.classList.remove('opacity-0', 'translate-y-8');
      }
    });
  });
</script> 